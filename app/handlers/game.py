from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
import time
import os

from app.db_utils.game import add_game
from app.utils.safe_username import get_safe_username
from app.db_utils.player import update_player_stats
from app.db_utils.stats_songs import update_song_stats
from app.dependencies import db_session
from app.keyboards.game_keyboard import game_keyboard
from app.keyboards.to_home_keyboard import to_home_from_game_keyboard
from app.states import GameStates
from app.messages.texts import TIME_LIMIT, RIGHT_ANSWER, WRONG_ANSWER, QUESTION, FINISH_GAME
from app.logger import setup_logger

logger = setup_logger(__name__)

MAX_TIME = 20


async def send_question(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫—É.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞.
    - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) —Å –æ—Ç—Ä—ã–≤–∫–æ–º —Ç—Ä–µ–∫–∞.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞ –æ—Ç–≤–µ—Ç.
    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
    - –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

    :param message: –û–±—ä–µ–∫—Ç Message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    :param state: FSMContext –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã.
    """
    data = await state.get_data()
    current = data.get("current_question", 0)
    questions = data.get("questions")

    if current >= len(questions):
        await finish_game(message, state)
        return

    question = questions[current]

    base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    clip_abs_path = os.path.join(base_dir, question["clip_path"])

    if os.path.exists(clip_abs_path):
        await message.answer_voice(FSInputFile(str(clip_abs_path)))
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {question['clip_path']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await message.answer(QUESTION.format(question=current + 1, lenght=len(questions), time=MAX_TIME),
                         parse_mode="HTML",
                         reply_markup=game_keyboard(question))
    await state.set_state(GameStates.WAIT_ANSWER)
    await state.update_data(start_time=time.time())


async def answer_callback_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞, –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–∞–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
    - –ù–∞—á–∏—Å–ª—è–µ—Ç –∏–ª–∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç –æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–µ–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    - –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.

    :param callback: CallbackQuery —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: FSMContext –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã.
    """
    data = await state.get_data()
    current = data.get("current_question", 0)
    score = data.get("score", 0)
    questions = data.get("questions")
    song_id = questions[current]["song_id"]
    start_time = data.get("start_time", time.time())

    elapsed = time.time() - start_time
    if elapsed > MAX_TIME:
        await callback.answer(TIME_LIMIT, show_alert=True)
        await next_question(callback.message, state)
        return

    selected = int(callback.data.split("_")[1])
    correct = questions[current]["correct"]

    if selected == correct:
        points = max(1, int(MAX_TIME - elapsed))
        score += points
        correct_answered = True
        await callback.answer(RIGHT_ANSWER.format(points=points))
        await callback.message.edit_reply_markup(reply_markup=game_keyboard(questions[current], selected=selected))
    else:
        score -= 10
        correct_answered = False
        await callback.answer(WRONG_ANSWER.format(answer=questions[current]['options'][correct]))
        await callback.message.edit_reply_markup(reply_markup=game_keyboard(questions[current], selected=selected))

    with db_session() as db:
        update_song_stats(db, song_id, correct_answered)

    await state.update_data(score=score)
    await next_question(callback.message, state)


async def next_question(message: Message, state: FSMContext) -> None:
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
    - –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫—É.

    :param message: –û–±—ä–µ–∫—Ç Message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    :param state: FSMContext –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã.
    """
    data = await state.get_data()
    current = data.get("current_question", 0)
    await state.update_data(current_question=current + 1)
    await send_question(message, state)


async def finish_game(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É.
    - –°—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ –∏–≥—Ä–æ–∫—É.
    - –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    :param message: –û–±—ä–µ–∫—Ç Message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    :param state: FSMContext –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    data = await state.get_data()
    score = data.get("score", 0)
    tg_id = data.get("tg_id")

    with db_session() as db:
        add_game(db, str(tg_id), score)
        update_player_stats(db, str(tg_id), score)
    logger.info(f"üéØ –ò–≥—Ä–æ–∫ —Å id:{tg_id} –∑–∞–∫–æ–Ω—á–∏–ª –∏–≥—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {score}")
    await message.answer(FINISH_GAME.format(score=score), parse_mode="HTML", reply_markup=to_home_from_game_keyboard())
    await state.clear()


def register_callback_handler(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–≥—Ä—ã.

    :param dp: –û–±—ä–µ–∫—Ç Dispatcher –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    dp.callback_query.register(answer_callback_handler, lambda c: c.data and c.data.startswith("answer_"))
